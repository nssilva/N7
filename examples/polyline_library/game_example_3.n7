' game_example_3.n7
' -----------------
' Add a player that can shoot down enemies. Sprites generated by the Image Creator from Microsoft
' Designer.

include "polyline.n7"

#win32

visible playerImage, enemyImage
visible vPlayerBullets

set window "PolyLine Game Example", 320, 240, false, 2
set redraw off

playerImage = loadimage("assets/player.png")
enemyImage = loadimage("assets/enemy.png")

randomize time()

enemies = []            ' List of enemies.
enemyDelay = 30         ' Delay between enemies.
enemyTimer = enemyDelay ' Time until next enemy should spawn.
' Create a random path.
path = RandomPath()
' Number of enemies to use this path.
pathEnemies = 4 + rnd(4)

' A player and its bullets.
player = Player()
vPlayerBullets = []

' Loop until escape key is pressed.
while not keydown(KEY_ESCAPE, true)
    ' Time to spawn a new enemy?
    enemyTimer = enemyTimer - 1
    if enemyTimer <= 0
        enemies[sizeof(enemies)] = Enemy(path)
        ' Time for a new path?
        pathEnemies = pathEnemies - 1
        if pathEnemies = 0
            ' Create a new path and wait some extra time.
            path = RandomPath()
            pathEnemies = 4 + rnd(4)
            ' Calculate an okay delay until the new path should start spawning enemies.
            enemyTimer = 0
            foreach e in enemies  enemyTimer = max(enemyTimer, e.TimeLeft())
            enemyTimer = enemyTimer - rnd(4)*60
        else
            enemyTimer = enemyTimer + enemyDelay
        endif
    endif
    
    ' Update sprites.
    UpdateSpriteList(enemies)
    player.Update()
    UpdateSpriteList(vPlayerBullets)

    ' Draw.    
    set color 0, 0, 0
    cls
    
    DrawSpriteList(enemies)
    DrawSpriteList(vPlayerBullets)
    player.Draw()
    
    set color 255, 255, 255
    set caret 0, 0
    wln "enemies: " + sizeof(enemies)
    wln "player bullets: " + sizeof(vPlayerBullets)
            
    redraw
    fwait 60
wend

' RandomPath
' ----------
' Return a random path.
function RandomPath()
    points = []
    ' Always start at top.
    points[0] = [rnd(width(primary)), -8]
    ' Two random completely random points.
    for i = 1 to 2  points[i] = [rnd(width(primary)), rnd(height(primary))]
    ' Exit at any of the screen edges but top.
    select rnd(3)
        case 0  points[3] = [rnd(width(primary)), height(primary) + 8]  ' Bottom.
        case 1  points[3] = [-8, rnd(height(primary))]                  ' Left.
        case 2  points[3] = [width(primary) + 8, rnd(height(primary))]  ' Right.
    endsel
    ' Create and return path.
    return PolyLine(points, false)
endfunc

' Enemy
' -----
' Return new enemy that follows the specified path.
function Enemy(path)
    e = []

    ' Image.
    e.img = enemyImage
    ' Path, distance traveled, speed and angle.
    e.path = path    
    e.dist = 0
    e.spd = 2
    e.angle = 0
    ' Size.
    e.w = width(e.img)
    e.h = height(e.img)

    ' UpdatePos
    ' ---------
    ' Update position based on currently traveled distance along path.
    e.UpdatePos = function()
        ' 'GetPoint' returns 'unset' if distance is out of path range.
        pos = this.path.GetPoint(this.dist, true)
        if pos
            ' Set position and direction and return true.
            this.x = pos[0] - this.w/2
            this.y = pos[1] - this.h/2
            ' Use GetDirection to get normalized derivative and atan2 to convert to angle.
            dir = this.path.GetDirection(this.dist, true)
            this.a = atan2(dir[1], dir[0])
            return not HitByAnyBullet(this, vPlayerBullets)
        else
            return false
        endif
    endfunc

    ' Update
    ' ------
    ' Return true while alive.        
    e.Update = function()
        ' Increase travel distance.
        this.dist = this.dist + this.spd
        ' Return false if end of path has been reached.
        if not this.UpdatePos()  return false    
        return true
    endfunc

    ' Draw
    ' ----
    e.Draw = function()
        set color 255, 255, 255
        draw image xform this.img, this.x + this.w/2, this.y + this.h/2,
                1, 1,
                this.a,
                this.w/2, this.h/2 
    endfunc

    ' TimeLeft
    ' --------
    ' Return time left for this enemy.
    e.TimeLeft = function()
        return (this.path.GetLength() - this.dist)/this.spd
    endfunc

    ' Set initial position.
    e.UpdatePos()
            
    return e
endfunc

' Player
' ------
function Player()
    p = []
    ' Size, position and speed.
    p.img = playerImage
    p.w = width(playerImage)
    p.h = height(playerImage)
    p.x = (width(primary) - p.w)/2
    p.y = height(primary) - p.h*2
    p.spd = 2
    ' Delay between shots.
    p.shotDelay = 20
    p.shootTimer = 0
    
    ' Update
    ' ------
    p.Update = function()
        ' Move.
        dx = 0
        dy = 0
        if keydown(KEY_LEFT)  dx = dx - 1
        if keydown(KEY_RIGHT)  dx = dx + 1
        if keydown(KEY_UP)  dy = dy - 1
        if keydown(KEY_DOWN)  dy = dy + 1
        if dx or dy
            k = this.spd/sqr(dx*dx + dy*dy)
            this.x = min(max(this.x + dx*k, 0), width(primary) - this.w)
            this.y = min(max(this.y + dy*k, 0), height(primary) - this.h)
        endif
        ' Shoot.
        this.shootTimer = max(this.shootTimer - 1, 0)
        if keydown(KEY_SPACE) and this.shootTimer = 0
            this.shootTimer = this.shotDelay
            vPlayerBullets[sizeof(vPlayerBullets)] = Bullet(this.x + this.w/2, this.y, 0, -4)
        endif
    endfunc
    
    ' Draw
    ' ----
    p.Draw = function()
        set color 255, 255, 255
        draw image this.img, this.x, this.y
    endfunc
    
    return p
endfunc

' Bullet
' ------
function Bullet(centerX, centerY, dx, dy)
    b = []
    ' Size, position and speed.
    b.w = 2
    b.h = 8
    b.x = centerX - b.w/2
    b.y = centerY - b.h/2
    b.dx = dx
    b.dy = dy
    
    ' Update
    ' ------
    b.Update = function()
        this.x = this.x + this.dx
        this.y = this.y + this.dy
        ' Return while visible.
        return not (this.dx < 0 and this.x < -this.w or
                this.dx > 0 and this.x >= width(primary) or
                this.dy < 0 and this.y < -this.h or
                this.dy > 0 and this.y >= height(primary))
    endfunc
    
    ' Draw
    ' ----
    b.Draw = function()
        set color 255, 255, 0
        draw rect this.x, this.y, this.w, this.h, true
    endfunc

    return b
endfunc

' UpdateSpriteList
' ----------------
function UpdateSpriteList(list)
    i = 0; while i < sizeof(list)
        ' Alive?
        if list[i].Update()  i = i + 1
        ' Remove.
        else  free key list, i
    wend
endfunc

' DrawSpriteList
' --------------
function DrawSpriteList(list)
    foreach s in list  s.Draw()
endfunc

' HitByAnyBullet
' --------------
' Return true if sprite 's' has been hit by any bullet in 'bullets'.
function HitByAnyBullet(s, bullets)
    hit = false
    i = 0; while i < sizeof(bullets)
        if SpritesOverlap(s, bullets[i])
            hit = true
            free key bullets, i
        else
            i = i + 1
        endif
    wend
    return hit
endfunc

' SpritesOverlap
' --------------
' Return true if sprite 'a' overlaps sprite 'b'.
function SpritesOverlap(a, b)
    return a.x + a.w > b.x and a.x < b.x + b.w and a.y + a.h > b.y and a.y < b.y + b.h
endfunc
